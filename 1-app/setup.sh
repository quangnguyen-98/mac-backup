#!/bin/bash

# =============================================================================
#  Mac App Setup Script - Step 1 of 2
# =============================================================================
#  Run this FIRST after factory reset: ./setup.sh
#  This script will:
#    1. Install Homebrew
#    2. Install all packages/apps from Brewfile (including Nerd Font)
#    3. Install Python & Node.js via pyenv/fnm
#    4. Setup bash/zsh PATH
#    5. Show manual apps list
#
#  After this, run: ../2-fish-shell/setup-fish.sh
# =============================================================================

set -e  # Exit on error

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo ""
echo -e "${BOLD}=============================================="
echo "  🚀 Mac Setup - Step 1: Apps & Tools"
echo "  Installing Homebrew, CLI tools & apps"
echo "==============================================${NC}"
echo ""
sleep 1

# =============================================================================
# Step 1: Install Homebrew
# =============================================================================
echo -e "${BLUE}${BOLD}[1/5] Checking Homebrew...${NC}"
echo ""

if ! command -v brew &> /dev/null; then
    echo -e "${YELLOW}⚠️  Homebrew not found. Installing...${NC}"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # Add Homebrew to PATH
    if [[ $(uname -m) == 'arm64' ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    else
        echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/usr/local/bin/brew shellenv)"
    fi

    echo -e "${GREEN}✅ Homebrew installed${NC}"
else
    echo -e "${GREEN}✅ Homebrew already installed${NC}"
fi

echo ""
sleep 1

# =============================================================================
# Step 2: Install packages from Brewfile
# =============================================================================
echo -e "${BLUE}${BOLD}[2/5] Installing packages from Brewfile...${NC}"
echo -e "${YELLOW}⏳ This may take 10-30 minutes depending on your network${NC}"
echo ""

if [ -f "$SCRIPT_DIR/Brewfile" ]; then
    cd "$SCRIPT_DIR"
    brew bundle install --file="$SCRIPT_DIR/Brewfile" --verbose
    echo ""
    echo -e "${GREEN}✅ All Homebrew packages installed (including Nerd Font for icons)${NC}"
else
    echo -e "${RED}❌ Brewfile not found in $SCRIPT_DIR${NC}"
    exit 1
fi

echo ""
sleep 1

# =============================================================================
# Step 3: Setup bash/zsh for compatibility
# =============================================================================
echo -e "${BLUE}${BOLD}[3/5] Setting up bash/zsh compatibility...${NC}"
echo ""

# Determine Homebrew prefix
if [[ $(uname -m) == 'arm64' ]]; then
    BREW_PREFIX="/opt/homebrew"
else
    BREW_PREFIX="/usr/local"
fi

# Create .zshrc if it doesn't exist
if [ ! -f ~/.zshrc ]; then
    touch ~/.zshrc
fi

# Add configurations to .zshrc
cat >> ~/.zshrc << EOF

# =============================================================================
# Auto-generated by mac-backup setup
# =============================================================================

# Homebrew
eval "\$($BREW_PREFIX/bin/brew shellenv)"

# Python (pyenv)
export PYENV_ROOT="\$HOME/.pyenv"
export PATH="\$PYENV_ROOT/bin:\$PATH"
if command -v pyenv >/dev/null 2>&1; then
    eval "\$(pyenv init --path)"
    eval "\$(pyenv init -)"
    eval "\$(pyenv virtualenv-init -)"
fi

# Node.js (fnm)
if command -v fnm >/dev/null 2>&1; then
    eval "\$(fnm env --use-on-cd)"
fi

# PostgreSQL client
export PATH="$BREW_PREFIX/opt/libpq/bin:\$PATH"

# Direnv
if command -v direnv >/dev/null 2>&1; then
    eval "\$(direnv hook zsh)"
fi

# fzf
if command -v fzf >/dev/null 2>&1; then
    eval "\$(fzf --zsh)"
fi

# zoxide
if command -v zoxide >/dev/null 2>&1; then
    eval "\$(zoxide init zsh)"
    alias cd='z'
fi

# Custom bin
export PATH="\$HOME/bin:\$PATH"

# Editor
export EDITOR=vim
EOF

echo -e "${GREEN}✅ Bash/Zsh configured${NC}"

echo ""
sleep 1

# =============================================================================
# Step 4: Install Python & Node.js versions
# =============================================================================
echo -e "${BLUE}${BOLD}[4/5] Setting up development environments...${NC}"
echo ""

# Set up pyenv
if command -v pyenv &> /dev/null; then
    echo "🐍 Setting up Python via pyenv..."
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"

    # Install latest Python 3.12 if no versions installed
    if [ -z "$(pyenv versions --bare)" ]; then
        echo "Installing Python 3.12..."
        pyenv install 3.12
        pyenv global 3.12
        echo -e "${GREEN}✅ Python 3.12 installed${NC}"
    else
        echo -e "${GREEN}✅ Python already configured${NC}"
    fi
fi

# Set up fnm (Node.js)
if command -v fnm &> /dev/null; then
    echo ""
    echo "📦 Setting up Node.js via fnm..."
    eval "$(fnm env --shell bash)"

    # Install latest LTS Node if no versions installed
    if [ -z "$(fnm list)" ]; then
        echo "Installing Node.js LTS..."
        fnm install --lts
        fnm default lts-latest
        echo -e "${GREEN}✅ Node.js LTS installed${NC}"
    else
        echo -e "${GREEN}✅ Node.js already configured${NC}"
    fi
fi

echo ""
sleep 1

# =============================================================================
# Step 5: Manual apps reminder
# =============================================================================
echo -e "${BLUE}${BOLD}[5/5] Manual installation required${NC}"
echo ""

if [ -f "$SCRIPT_DIR/manual-apps.txt" ]; then
    echo -e "${YELLOW}⚠️  The following apps need manual installation:${NC}"
    echo ""
    head -20 "$SCRIPT_DIR/manual-apps.txt"
    echo ""
    echo -e "${YELLOW}📝 Full list: $SCRIPT_DIR/manual-apps.txt${NC}"
else
    echo "No manual apps list found"
fi

echo ""

# =============================================================================
# Done!
# =============================================================================
echo -e "${GREEN}${BOLD}=============================================="
echo "  ✅ Step 1 Complete - Apps & Tools Installed"
echo "==============================================${NC}"
echo ""
echo "What was installed:"
echo "  ✅ Homebrew + all CLI tools & apps"
echo "  ✅ Nerd Font (MesloLGS NF) for beautiful icons"
echo "  ✅ Fish shell (not configured yet)"
echo "  ✅ Python (via pyenv)"
echo "  ✅ Node.js (via fnm)"
echo "  ✅ Bash/Zsh PATH configured"
echo ""
echo -e "${YELLOW}${BOLD}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${YELLOW}${BOLD}  ⚡ NEXT STEP - Fish Shell Setup${NC}"
echo -e "${YELLOW}${BOLD}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo "Run this command to setup Fish with beautiful Tide prompt:"
echo ""
echo -e "  ${GREEN}${BOLD}cd ../2-fish-shell && ./setup-fish.sh${NC}"
echo ""
echo "This will:"
echo "  • Set Fish as default shell"
echo "  • Configure Fish with all PATH setup"
echo "  • Install Tide prompt (Rainbow style - colorful with icons)"
echo "  • Install useful Fish plugins"
echo ""
echo "Additional setup:"
echo "  • ${BOLD}Set Terminal font:${NC}"
echo "    - iTerm2: Preferences → Profiles → Text → Font → MesloLGS NF"
echo "    - Terminal: Preferences → Profiles → Font → MesloLGS NF"
echo "  • Git: git config --global user.name 'Your Name'"
echo "  • Git: git config --global user.email 'your@email.com'"
echo "  • SSH: ssh-keygen -t ed25519 -C 'your@email.com'"
echo ""
echo -e "${GREEN}🎉 Ready for Step 2!${NC}"
echo ""
